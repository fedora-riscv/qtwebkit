diff -up webkit-qtwebkit/Source/WebCore/bindings/js/JSDocumentCustom.cpp.type-cast webkit-qtwebkit/Source/WebCore/bindings/js/JSDocumentCustom.cpp
--- webkit-qtwebkit/Source/WebCore/bindings/js/JSDocumentCustom.cpp.type-cast	2011-05-12 16:42:28.000000000 +0200
+++ webkit-qtwebkit/Source/WebCore/bindings/js/JSDocumentCustom.cpp	2011-05-19 15:07:35.000000000 +0200
@@ -118,7 +118,7 @@ JSValue JSDocument::createTouchList(Exec
 {
     RefPtr<TouchList> touchList = TouchList::create();
 
-    for (int i = 0; i < exec->argumentCount(); i++)
+    for (uint i = 0; i < exec->argumentCount(); i++)
         touchList->append(toTouch(exec->argument(i)));
 
     return toJS(exec, globalObject(), touchList.release());
diff -up webkit-qtwebkit/Source/WebCore/editing/qt/SmartReplaceQt.cpp.type-cast webkit-qtwebkit/Source/WebCore/editing/qt/SmartReplaceQt.cpp
--- webkit-qtwebkit/Source/WebCore/editing/qt/SmartReplaceQt.cpp.type-cast	2011-05-12 16:42:28.000000000 +0200
+++ webkit-qtwebkit/Source/WebCore/editing/qt/SmartReplaceQt.cpp	2011-05-19 15:07:35.000000000 +0200
@@ -55,8 +55,8 @@ bool isCharacterSmartReplaceExempt(UChar
     const char prev[] = "([\"\'#$/-`{\0";
     const char next[] = ")].,;:?\'!\"%*-/}\0";
     const char* str = (isPreviousCharacter) ? prev : next;
-    for (int i = 0; i < strlen(str); ++i) {
-        if (str[i] == c)
+    for (uint i = 0; i < strlen(str); ++i) {
+        if ((UChar32)str[i] == c)
           return true;
     }
 
diff -up webkit-qtwebkit/Source/WebCore/page/Frame.cpp.type-cast webkit-qtwebkit/Source/WebCore/page/Frame.cpp
--- webkit-qtwebkit/Source/WebCore/page/Frame.cpp.type-cast	2011-05-12 16:42:28.000000000 +0200
+++ webkit-qtwebkit/Source/WebCore/page/Frame.cpp	2011-05-19 15:07:35.000000000 +0200
@@ -969,7 +969,7 @@ void Frame::tiledBackingStorePaintEnd(co
         return;
     unsigned size = paintedArea.size();
     // Request repaint from the system
-    for (int n = 0; n < size; ++n)
+    for (uint n = 0; n < size; ++n)
         m_page->chrome()->invalidateContentsAndWindow(m_view->contentsToWindow(paintedArea[n]), false);
 }
 
diff -up webkit-qtwebkit/Source/WebCore/platform/graphics/qt/ImageDecoderQt.cpp.type-cast webkit-qtwebkit/Source/WebCore/platform/graphics/qt/ImageDecoderQt.cpp
--- webkit-qtwebkit/Source/WebCore/platform/graphics/qt/ImageDecoderQt.cpp.type-cast	2011-05-12 16:42:28.000000000 +0200
+++ webkit-qtwebkit/Source/WebCore/platform/graphics/qt/ImageDecoderQt.cpp	2011-05-19 15:07:35.000000000 +0200
@@ -184,7 +184,7 @@ void ImageDecoderQt::internalReadImage(s
       setFailed();
 
     // Attempt to return some memory
-    for (int i = 0; i < m_frameBufferCache.size(); ++i) {
+    for (uint i = 0; i < m_frameBufferCache.size(); ++i) {
         if (m_frameBufferCache[i].status() != ImageFrame::FrameComplete)
             return;
     }
diff -up webkit-qtwebkit/Source/WebCore/platform/graphics/TiledBackingStore.cpp.type-cast webkit-qtwebkit/Source/WebCore/platform/graphics/TiledBackingStore.cpp
--- webkit-qtwebkit/Source/WebCore/platform/graphics/TiledBackingStore.cpp.type-cast	2011-05-12 16:42:28.000000000 +0200
+++ webkit-qtwebkit/Source/WebCore/platform/graphics/TiledBackingStore.cpp	2011-05-19 15:07:35.000000000 +0200
@@ -76,8 +76,8 @@ void TiledBackingStore::invalidate(const
     Tile::Coordinate topLeft = tileCoordinateForPoint(dirtyRect.location());
     Tile::Coordinate bottomRight = tileCoordinateForPoint(IntPoint(dirtyRect.maxX(), dirtyRect.maxY()));
     
-    for (unsigned yCoordinate = topLeft.y(); yCoordinate <= bottomRight.y(); ++yCoordinate) {
-        for (unsigned xCoordinate = topLeft.x(); xCoordinate <= bottomRight.x(); ++xCoordinate) {
+    for (signed yCoordinate = topLeft.y(); yCoordinate <= bottomRight.y(); ++yCoordinate) {
+        for (signed xCoordinate = topLeft.x(); xCoordinate <= bottomRight.x(); ++xCoordinate) {
             RefPtr<Tile> currentTile = tileAt(Tile::Coordinate(xCoordinate, yCoordinate));
             if (!currentTile)
                 continue;
@@ -135,8 +135,8 @@ void TiledBackingStore::paint(GraphicsCo
     Tile::Coordinate topLeft = tileCoordinateForPoint(dirtyRect.location());
     Tile::Coordinate bottomRight = tileCoordinateForPoint(IntPoint(dirtyRect.maxX(), dirtyRect.maxY()));
 
-    for (unsigned yCoordinate = topLeft.y(); yCoordinate <= bottomRight.y(); ++yCoordinate) {
-        for (unsigned xCoordinate = topLeft.x(); xCoordinate <= bottomRight.x(); ++xCoordinate) {
+    for (signed yCoordinate = topLeft.y(); yCoordinate <= bottomRight.y(); ++yCoordinate) {
+        for (signed xCoordinate = topLeft.x(); xCoordinate <= bottomRight.x(); ++xCoordinate) {
             Tile::Coordinate currentCoordinate(xCoordinate, yCoordinate);
             RefPtr<Tile> currentTile = tileAt(currentCoordinate);
             if (currentTile && currentTile->isReadyToPaint())
@@ -231,8 +231,8 @@ void TiledBackingStore::createTiles()
     unsigned requiredTileCount = 0;
     Tile::Coordinate topLeft = tileCoordinateForPoint(coverRect.location());
     Tile::Coordinate bottomRight = tileCoordinateForPoint(IntPoint(coverRect.maxX(), coverRect.maxY()));
-    for (unsigned yCoordinate = topLeft.y(); yCoordinate <= bottomRight.y(); ++yCoordinate) {
-        for (unsigned xCoordinate = topLeft.x(); xCoordinate <= bottomRight.x(); ++xCoordinate) {
+    for (signed yCoordinate = topLeft.y(); yCoordinate <= bottomRight.y(); ++yCoordinate) {
+        for (signed xCoordinate = topLeft.x(); xCoordinate <= bottomRight.x(); ++xCoordinate) {
             Tile::Coordinate currentCoordinate(xCoordinate, yCoordinate);
             if (tileAt(currentCoordinate))
                 continue;
diff -up webkit-qtwebkit/Source/WebCore/platform/network/MIMESniffing.cpp.type-cast webkit-qtwebkit/Source/WebCore/platform/network/MIMESniffing.cpp
--- webkit-qtwebkit/Source/WebCore/platform/network/MIMESniffing.cpp.type-cast	2011-05-12 16:42:28.000000000 +0200
+++ webkit-qtwebkit/Source/WebCore/platform/network/MIMESniffing.cpp	2011-05-19 15:07:35.000000000 +0200
@@ -223,7 +223,7 @@ const size_t imageTypesSize = sizeof(ima
 static inline size_t dataSizeNeededForImageSniffing()
 {
     size_t result = 0;
-    for (int i = 0; i < imageTypesSize; ++i) {
+    for (uint i = 0; i < imageTypesSize; ++i) {
         if (imageTypes[i].size > result)
             result = imageTypes[i].size;
     }
diff -up webkit-qtwebkit/Source/WebCore/platform/network/qt/QNetworkReplyHandler.cpp.type-cast webkit-qtwebkit/Source/WebCore/platform/network/qt/QNetworkReplyHandler.cpp
--- webkit-qtwebkit/Source/WebCore/platform/network/qt/QNetworkReplyHandler.cpp.type-cast	2011-05-12 16:42:28.000000000 +0200
+++ webkit-qtwebkit/Source/WebCore/platform/network/qt/QNetworkReplyHandler.cpp	2011-05-19 15:07:35.000000000 +0200
@@ -71,7 +71,7 @@ FormDataIODevice::~FormDataIODevice()
 
 qint64 FormDataIODevice::computeSize() 
 {
-    for (int i = 0; i < m_formElements.size(); ++i) {
+    for (uint i = 0; i < m_formElements.size(); ++i) {
         const FormDataElement& element = m_formElements[i];
         if (element.m_type == FormDataElement::data) 
             m_dataSize += element.m_data.size();
@@ -124,7 +124,7 @@ qint64 FormDataIODevice::readData(char* 
             m_currentDelta += toCopy;
             copied += toCopy;
 
-            if (m_currentDelta == element.m_data.size())
+            if ((unsigned)m_currentDelta == element.m_data.size())
                 moveToNextElement();
         } else {
             const QByteArray data = m_currentFile->read(available);
diff -up webkit-qtwebkit/Source/WebCore/platform/network/qt/QtMIMETypeSniffer.cpp.type-cast webkit-qtwebkit/Source/WebCore/platform/network/qt/QtMIMETypeSniffer.cpp
--- webkit-qtwebkit/Source/WebCore/platform/network/qt/QtMIMETypeSniffer.cpp.type-cast	2011-05-12 16:42:28.000000000 +0200
+++ webkit-qtwebkit/Source/WebCore/platform/network/qt/QtMIMETypeSniffer.cpp	2011-05-19 15:07:35.000000000 +0200
@@ -44,7 +44,7 @@ bool QtMIMETypeSniffer::sniff()
     // See QNetworkReplyWrapper::setFinished().
     const bool isReplyFinished = m_reply->property("_q_isFinished").toBool();
 
-    if (!isReplyFinished && m_reply->bytesAvailable() < m_sniffer.dataSize())
+    if (!isReplyFinished && (unsigned)m_reply->bytesAvailable() < m_sniffer.dataSize())
         return false;
 
     QByteArray data = m_reply->peek(m_sniffer.dataSize());
